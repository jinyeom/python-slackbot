#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import time
from datetime import datetime
import logging
import re
from typing import Tuple, Optional, Sequence, Dict

import fire
from slackclient import SlackClient
from wit import Wit


def _get_env_var(env_var):
    token = os.environ.get(env_var)
    if token is None:
        raise ValueError(f"No environment variable named {env_var}")
    return token


class BMO(object):
    def __init__(self,
                 db_path: str,
                 slack_access_token: str = "BMO_SLACK_ACCESS_TOKEN", 
                 wit_access_token: str = "BMO_WIT_ACCESS_TOKEN",
                 rtm_read_delay: int = 1) -> None:
        self._logger = logging.getLogger(self.__class__.__name__)
        self._logger.setLevel(logging.INFO)

        self._rtm_read_delay = rtm_read_delay

        # create clients for Slack and Wit.ai
        self._slack_client = SlackClient(_get_env_var(slack_access_token))
        self._wit_client = Wit(_get_env_var(wit_access_token))

        # create and initialize database
        self._db = records.Database(_get_env_var(database_url))

    def __str__(self):
        return "Yay, BMO!"

    def _parse_direct_mention(self, message: str) -> Tuple[Optional[str]]:
        matches = re.search("^<@(|[WU].+?)>(.*)", message)
        return (matches.group(1), matches.group(2).strip()) if matches else (None, None)

    def _listen(self, slack_events: Sequence[Dict]) -> Tuple[Optional[str]]:
        for event in slack_events:
            if event["type"] == "message" and not "subtype" in event:
                user_id, message = self._parse_direct_mention(event["text"])
                if user_id == self._user_id:
                    sender = event["user"]
                    self._logger.info(f"[{datetime.now()}] {sender} said \"{message}\"")
                    return message, event["channel"]
        return None, None

    def _respond(self, message: str, channel: str):
        if message is not None and channel is not None:
            response = self._wit_client.message(message)
            self._slack_client.api_call("chat.postMessage", channel=channel, text=str(response))

    def run(self):
        if self._slack_client.rtm_connect(with_team_state=False):
            self._logger.info(f"[{datetime.now()}] BMO connected to Slack!")
            self._user_id = self._slack_client.api_call("auth.test")["user_id"]
            while True:
                # listen and respond
                self._respond(*self._listen(self._slack_client.rtm_read()))
                time.sleep(self._rtm_read_delay)
        else:
            raise RuntimeError("Connection failed")


if __name__ == "__main__":
    fire.Fire(BMO)

